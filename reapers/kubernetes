#!/bin/bash
set -a
ORIGINAL_JOB=$JOB

query_pod()
{
  kubectl get pods -a --selector=service=$JOB "$@" 2> /dev/null
}

oldest_pod(){  
  query_pod -o=custom-columns=STATUS:.status.startTime,NAME:.metadata.name \
   | sort | head -n1 | awk '{ print $5 }'
}

reap()
{
  source /etc/default/$JOB
  # Might want to use .metadata.creationTimestamp
  START=$(kubectl get job $pod -o=jsonpath={.status.startTime} 2> /dev/null)
  END=$(kubectl get job $pod -o=jsonpath={.status.completionTime} 2> /dev/null)
  if [[ "$END" == "<nil>" ]]; then #Failure to launch results in nil completion
    END=$(date +"%Y-%m-%d %H:%M:%S %z %Z")
  fi

  #kubectl delete job $pod > /dev/null
  echo "[$JOB] Reaping @ [$OUTPUT] @ $END"

  if [ $ALERTER ]; then
      export POD_NAME=$pod
      . /app/alerters/$ALERTER
  fi
}

# If job set. Reap that job
# Itereate over all finished jobs
if [ -z "$JOB" ] ; then
  all_jobs=($(kubectl get jobs --no-headers -o=jsonpath='{.items[*].metadata.name}' 2> /dev/null))
else
  all_jobs=($(kubectl get jobs --selector=service=${JOB} -o=jsonpath='{.items[*].metadata.name}' 2> /dev/null))
fi

for pod in "${all_jobs[@]}"
do
  #Get the original job name
  JOB=$(kubectl get jobs $pod -o template --template '{{index .metadata.labels "service"}}' 2> /dev/null)
  if [ -f "/etc/default/$JOB" ] ; then
    SUCCEEDED=$(kubectl get job $pod -o=jsonpath={.status.succeeded})
    if [[ "$SUCCEEDED" -eq 1 ]]; then
      echo 'succeed'
      OUTPUT="Succeeded"
      EXIT_CODE=0
      reap
      break
    else
      ACTIVE=$(kubectl get job $pod -o=jsonpath={.status.active})
      FAILED=$(kubectl get job $pod -o=jsonpath={.status.failed})
      echo $ACTIVE $FAILED

      if [[ "$FAILED" -gt 0 ]]; then
        echo 'Pod run failed reaping'
        #REASON=$(query_pod -o=jsonpath='{.status.containerStatuses[0].state.terminated.reason}')
        #echo $REASON
        echo 'reason'

        POOOOD=$(oldest_pod)
        echo "Oldest pod:  $POOOOD"
        
        REASON=$(kubectl get pod $POOOOD -o=jsonpath='{.status.containerStatuses[0].state.terminated.reason}')
        EXIT_CODE=$(kubectl get pod $POOOOD -o=jsonpath='{.status.containerStatuses[0].state.terminated.exitCode}')

        echo "YEEEEE $REASON"
        echo "EXIT $EXIT_CODE"
# kubectl get pods -a --selector=service=$JOB \
# -o=jsonpath='{.items[*].status.containerStatuses[0].state.terminated.exitCode}'
#➜  jobs git:(master) ✗ kubectl get pods --no-headers -a --selector=service=spawn-mem  -o=jsonpath='{.items[*].status.containerStatuses[*].state}'
        if [[ "$REASON" == "OOMKilled" ]]; then
          EXIT_CODE=137
        fi
        echo 'fail'

        OUTPUT="Failed with exit code [$EXIT_CODE] for [$REASON]"

        reap
        break
      fi

      POD_NAME=$(kubectl get pods -a --selector=service=$JOB -o=jsonpath='{.items[*].metadata.name}')      
      STATUS=$(query_pod -o=jsonpath='{.status.phase}' 2> /dev/null); STATUS_ERR=$?
      if [ $STATUS_ERR -ne 0 ]; then
        if [[ $(echo "$POD_NAME" | wc -w) -eq 2 ]]; then
          echo "Pod be rollin rollin"
        else
          OUTPUT="Status is empty pod was likely deleted or terminated"
          return
        fi 

      fi

      ERRORS=$(query_pod -o=jsonpath='{.status.containerStatuses[0].state.waiting.message}' 2> /dev/null); COMMAND_ERR=$?
      if [ $COMMAND_ERR -eq 0 ]; then
        OUTPUT="[${JOB}] - Intervention required pending status - ${ERRORS} - ${STATUS}"
        EXIT_CODE=98
        return 
      fi

      OUTPUT="$STATUS"

#    else
#        OUTPUT="Unknown Status for Job [$STATUS] - The pod has likely been deleted"
#        STATUS="Unknown"
#        EXIT_CODE=404
    fi
  fi
done

JOB=$ORIGINAL_JOB

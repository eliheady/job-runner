#!/bin/bash
# Set KUBERNETES_MASTER to the URL of your cluster example http://kubemaster:8080
export KUBERNETES_MASTER
NODE_SELECTOR=${NODE_SELECTOR:=""}
PULL_POLICY=${PULL_POLICY:=""}

. /app/processor/reap
if [[ "$EXIT_CODE" -eq 98 ]]; then
  echo 'Container creation error'
  return
else
  unset EXIT_CODE
fi

compose2kube \
  -compose-file /app/compose/$JOB.yaml \
  -pull-policy="${PULL_POLICY}" \
  -node-selector="${NODE_SELECTOR}" \
  -output-dir k8s_${JOB} > /dev/null

OUTPUT=$(kubectl create -f k8s_${JOB}); RESULT=$?
if [ $RESULT -eq 0 ]; then
  rm -rf k8s_${JOB}
else
  OUTPUT="Could not create pod. $OUTPUT"
  echo "$OUTPUT"
  if [ "$IGNORE_OVERRUN" = true ] ; then
    echo "[${JOB}] - IGNORING OVERRUN - will not alert"
    EXIT_CODE=0
  else
    EXIT_CODE=100
  fi
  return
fi

echo 'waiting for start of job'
#Ensure the pod is actually registered. Avoids a possible race condition
until kubectl get jobs --selector=service=${JOB} &> /dev/null
do
  echo "sleeep $JOB"
  sleep 0.1
done

echo 'yes?'
if [ "$FOLLOW" != true ] ; then
  OUTPUT="Running"
  EXIT_CODE=0
else
  STATUS='Pending'
  while [ "$STATUS" == "Pending" ]
  do
    . /app/processor/reap
  done

  echo 'following log'
  POD_NAME=$(kubectl get pods --selector=service=$JOB -o=jsonpath='{.items[*].metadata.name}')
  kubectl logs -f $POD_NAME &

  echo 'waiting to reap'
  while [ -z "$EXIT_CODE" ]
  do
    . /app/processor/reap
  done
  echo 'fin'
fi
